"use strict";

var resizeHandler, scrollHandler, cookieBox, searchBox, 
    mainMenu, heroBanner, equalHeights, quickNav, tabHandler,
    slider, youTube, googleMaps, detailsSlider;

jQuery(document).ready(function () {
    resizeHandler = new ResizeHandler();
    scrollHandler = new ScrollHandler();

    cookieBox = new CookieBox();
    searchBox = new SearchBox();
    mainMenu = new MainMenu();
    heroBanner = new HeroBanner();
    equalHeights = new EqualHeights([{ "container": ".cards", "target": ".card" }]);
    equalHeights.processSelectors();
    quickNav = new QuickNav();
    tabHandler = new TabHandler();
    slider = new Slider();
    youTube = new YouTube();
    detailsSlider = new DetailsSlider();

    console.log('google maps');
});

// The previous version was too fast and didnt get called correctly
function initMap(){
    $(document).ready(function () {
        googleMaps = new GoogleMaps();

    });
}


var CookieBox = (function () {

    function CookieBox() {
        this.cookieDuration = 30; // Number of days before the cookie expires, and the banner reappears
        this.cookieName = 'avanscookie'; // Name of our cookie
        this.cookieValue = 'on';

        this.cookieToggle = jQuery('.cookie-toggle');
        this.cookieBox = jQuery('.cookie-box');

        if (this.cookieBox.length > 0) {
            this.registerEvents();
            this.showCookieDisclaimer();
        }
    }

    CookieBox.prototype.registerEvents = function () {
        var that = this;
        jQuery(this.cookieToggle).on('click', function () {
            that.createCookie(that.cookieName, that.cookieValue, that.cookieDuration);
            that.removeCookieBox();
            return false;
        });
    }

    CookieBox.prototype.showCookieDisclaimer = function() {
        if (this.checkCookie(this.cookieName) != this.cookieValue)
            this.cookieBox.addClass("show");
    }

    CookieBox.prototype.removeCookieBox = function() {
        jQuery(this.cookieBox).removeClass('show');
        resizeHandler.resize();
    }

    CookieBox.prototype.createCookie = function(name, value, days) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toGMTString();
            this.removeCookieBox();
        }
        else {
            var expires = "";
        }
        document.cookie = name+"="+value+expires+"; path=/";
    }

    CookieBox.prototype.checkCookie = function(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1, c.length);
            }
            if (c.indexOf(nameEQ) == 0) {
                return c.substring(nameEQ.length, c.length);
            }
        }
        return null;
    }

    return CookieBox;
}());


var DetailsSlider = (function () {

    function DetailsSlider() {
        this.component = jQuery('.component-details');
        this.pageLeft = jQuery('.component-details .page-left');
        this.pageRight = jQuery('.component-details .page-right');
        this.slides = jQuery('.component-details .niveau-container');
        this.pagerState = jQuery('.component-details .pager-state');

        this.slide = 0;

        if (this.component.length > 0) {
            this.registerEvents();
            this.setupSlides();
        }
    }
    
    DetailsSlider.prototype.setupSlides = function() {
        if (this.slides.length > 0) {
            var that = this;
            this.slides.each(function() {
                that.slide = that.slide + 1;
                if (jQuery(this).hasClass('ad')) {
                    return false;
                }
            });
        }
    }

    DetailsSlider.prototype.setSlider = function() {
        var that = this;
        this.pagerState.each(function() {
            jQuery(this).children('li').removeClass('active').addClass('inactive');
            var item = $(this).children('li')[that.slide - 1];
            jQuery(item).addClass('active');
        });

        jQuery(this.slides).parent().addClass('hidden-xs hidden-sm');
        jQuery(this.slides[this.slide - 1]).parent().removeClass('hidden-xs hidden-sm');

        if (this.slide === 1) {
            jQuery(this.pageLeft).parent().hide();
        } else {
            jQuery(this.pageLeft).parent().show();
        }

        if (this.slide === this.slides.length) {
            jQuery(this.pageRight).parent().hide();
        } else {
            jQuery(this.pageRight).parent().show();
        }
    }


    DetailsSlider.prototype.registerEvents = function () {
        var that = this;
        
        jQuery(this.pageLeft).on('click', function() {
            if (that.slide > 1) {
                that.slide = that.slide - 1;
                that.setSlider();
            }
            return false
        });

        jQuery(this.pageRight).on('click', function() {
            if (that.slide < that.slides.length) {
                that.slide = that.slide + 1;
                that.setSlider();
            }
            return false;
        });
    }
    
    return DetailsSlider;
}());

var EqualHeights = (function () {

    /*
        The selectors takes an array of selector objects. A selector object is defined as follows:

        { "container": ".my-container", "target", ".my-target"}

        Please note that target specifies a child of the container. Ie. .cards contains .card elements.
    */

    function EqualHeights(selectors) {
        this.selectors = [];
        if (selectors)
            this.selectors = selectors;
        this.running = false;
        
        if (this.selectors.length > 0) {
            this.registerResize();
        }
    }

    EqualHeights.prototype.processSelectors = function () {
        if (!equalHeights.running) {
            equalHeights.running = true;
            setTimeout(equalHeights.run, 66);
        }
    };

    EqualHeights.prototype.run = function () {
        equalHeights.selectors.forEach(function (selector) {
            equalHeights.processSelector(selector);
        });
        equalHeights.running = false;
    };

    EqualHeights.prototype.processSelector = function(selector) {
        jQuery(selector['container']).each(function(i, container) {
            if (!resizeHandler.respondToEquals('xs')) {
                var height = 0;
                jQuery(selector['target'], container).each(function(j, card) {
                    if (height < jQuery(card).height())
                        height = jQuery(card).height();
                });
                jQuery(selector['target'], container).height(height);
            } else {
                jQuery(selector['target'], container).height('');
            }
        });
    }

    EqualHeights.prototype.add = function (selector) {
        if (selector) {
            if (this.selectors.length === 0) 
                equalHeights.registerResize();

            this.selectors.push(selector);
            this.processSelector(selector);
        }
    };
    
    EqualHeights.prototype.registerResize = function () {
        resizeHandler.register(function () {
            equalHeights.processSelectors();
        });
    };

    return EqualHeights;
}());

var GoogleMaps = (function () {

    function GoogleMaps() {
        this.map;
        this.center; 
        this.location;

        if (jQuery('#googlemap').length > 0) {
            this.initMap();
            this.registerResize();
        }
    }
    
    GoogleMaps.prototype.initMap = function () {
        this.center = new google.maps.LatLng(51.68941652,5.28970957);
        this.location = new google.maps.LatLng(51.68949134,5.29414326);

        var myOptions = {
            zoom:16,
            center: this.center,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            disableDefaultUI: true,
            scrollwheel: false,
            draggable: false,
            zoomControl: false,
            scaleControl: false,
            disableDoubleClickZoom: true,
            clickableIcons: false
        };
            
        this.map = new google.maps.Map(document.getElementById('googlemap'), myOptions);
        var marker = new google.maps.Marker({
            map: this.map,
            position: this.location
        });

        this.centerMap();
    }

    GoogleMaps.prototype.centerMap = function() {
        if (resizeHandler.respondToEquals('xs')) {
            this.map.panTo(this.location);
        } else {
            this.map.panTo(this.center);
        }
    }

    GoogleMaps.prototype.registerResize = function () {
        resizeHandler.register(function () {
            googleMaps.centerMap();
        });
    };

    return GoogleMaps;
}());

var HeroBanner = (function () {

    /*
        This script uses some 'Magic Numbers' which are used to resize the banner images and video.
        These numbers are defined within the constructor and are used to maintain the correct image
        or video aspect ratio. The numbers should match those of the images/video used. Example:

        this.imageBannerRatio = { "width": 3360, "height": 1552 }
    */

    function HeroBanner() {
        this.homeElement = jQuery('.home-hero');
        this.mainElement = jQuery('.component-hero');
        this.bannerElement = jQuery('.component-hero .banner');
        this.eventBanner = jQuery('.component-hero.event');

        this.videoBannerElement = jQuery('.video-banner');
        this.videoCoverElement = jQuery('.video-cover');

        this.navElement = jQuery('.navbar.navbar-default');
        this.scrollDown = jQuery('.scrolldown, .scrollpast');
        this.content = jQuery('.content');

        this.videoBannerRatio = { "width": 1920, "height": 1080 };
        this.imageBannerRatio = { "width": 3360, "height": 1552 };
        this.imageBannerRatioXs = { "width": 764, "height": 496 };

        this.url = '';
        this.urlXs = '';

        if (this.mainElement.length > 0) {
            this.registerResize();
            this.registerEvents();
            this.setupHeroBanner();
        }
    }

    HeroBanner.prototype.setupHeroBanner = function () {
        if (this.mainElement.data('image')) {
            this.url = this.mainElement.data('image');
            this.urlXs = this.url;
            if (this.mainElement.data('image-xs'))
                this.urlXs = this.mainElement.data('image-xs');
        }
        this.setHeroBanner();
    };

    HeroBanner.prototype.setHeroBanner = function () {
        if (this.url.length > 0) {
            if (this.homeElement.length > 0)
                this.homeElement.removeAttr('style');
            this.mainElement.removeAttr('style');
            this.bannerElement.removeAttr('style');
            this.videoBannerElement.removeAttr('style');
            this.videoCoverElement.removeAttr('style');

            this.setHeroImage();
            this.setHeroSize();
        }
    };

    HeroBanner.prototype.setHeroImage = function () {
        if (this.homeElement.length > 0) {
            if (resizeHandler.respondToEquals('xs') || resizeHandler.respondToEquals('sm')) {
                var cookieHeight = jQuery('.cookie-box').height();
                this.homeElement.css({ 'background-image': 'url(\'' + this.urlXs + '\')', 'background-position-y': cookieHeight + 'px'});
            }
        } else {
            if (resizeHandler.respondToEquals('xs')) {
                this.bannerElement.css({ backgroundImage: 'url(\'' + this.urlXs + '\')'});
            } else {
                this.mainElement.css({ backgroundImage: 'url(\'' + this.url + '\')'});
            }
        }
    }

    HeroBanner.prototype.setHeroSize = function () {
        if (this.homeElement.length > 0) {
            if (!resizeHandler.respondToEquals('xs') && !resizeHandler.respondToEquals('sm')) {
                this.homeElement.css({ 'height': jQuery(window).height() + 'px'});
                this.bannerElement.css({ 'height': jQuery(window).height() + 'px'});
                
                var cookieHeight = jQuery('.cookie-box').height();
                this.videoBannerElement.css({ 'height': jQuery(window).height() + 'px'});
                this.videoCoverElement.css({ 'height': jQuery(document).height() + 'px'});
                this.videoCoverElement.children().css({ 'margin-top': (jQuery(window).height() + cookieHeight) + 'px'});
            } else {
                var bannerHeight = (jQuery(window).width() * this.videoBannerRatio.height) / this.videoBannerRatio.width;
                if (jQuery(window).width() > jQuery(window).height())
                    bannerHeight = bannerHeight / 2;

                this.homeElement.css({ "padding-top": Math.floor(bannerHeight) + 'px'});
            }
        } else {
            var bannerHeight = 0;
            if (this.eventBanner.length === 0) {
                if (resizeHandler.respondToEquals('xs'))
                    bannerHeight = (this.mainElement.outerWidth() * this.imageBannerRatioXs.height) / this.imageBannerRatioXs.width;
                else
                    bannerHeight = (this.mainElement.outerWidth() * this.imageBannerRatio.height) / this.imageBannerRatio.width;
                    
                this.bannerElement.css({ height: Math.floor(bannerHeight) + 'px'});
            }
        }
    }

    HeroBanner.prototype.registerResize = function () {
        var that = this;
        resizeHandler.register(function () {
            that.setHeroBanner();
        });
    };
    
    HeroBanner.prototype.registerEvents = function () {
        var that = this;
        this.scrollDown.on('click', function(e, i){
            jQuery('html, body').animate({ scrollTop: that.content.offset().top }, 1000);
            return false;
        });
    }
    return HeroBanner;
}());

var MainMenu = (function () {

    function MainMenu() {
        this.show = jQuery('.menu-show');
        this.hide = jQuery('.menu-hide');
        this.nav = jQuery('nav.navbar-default');
        this.menu = jQuery('.main-menu');
        this.menuLeft = jQuery('.main-menu-left');
        this.menuRight = jQuery('.main-menu-right');
        this.menuItems = jQuery('.menu-item');
        this.menuItem = jQuery('.menu-item > a');
        this.menuItemToggle = jQuery('.menu-item-toggle');
        this.quickNav = jQuery('.quick-nav');

        this.panelWidth = 0;
        this.skewWidth = 0;

        if (this.menu.length > 0) {
            this.registerEvents();
            this.registerResize();
            this.setupMenu();
        }
    }

    MainMenu.prototype.setupMenu = function() {
        this.skewWidth = (jQuery(window).height() * 1.1944) - jQuery(window).height();
        this.panelWidth = (jQuery(window).width() / 2) + (this.skewWidth / 2);

        if (!resizeHandler.respondToEquals('xs')) {
            this.menuLeft.find('> div').css({'right': (this.skewWidth / 2) + 'px'});

            if (this.nav.hasClass('menu-open')) {
                this.menu.css({ 'height': jQuery(window).height() + 'px'});
                this.menuLeft.css( { 'left': '-' + (this.skewWidth / 2) + 'px', 'height': jQuery(window).height() + 'px', 'width': this.panelWidth + 'px' } );
                this.menuRight.css( { 'right': '-' + (this.skewWidth / 2) + 'px', 'height': jQuery(window).height() + 'px', 'width': this.panelWidth + 'px' } );
            } else {
                this.menuLeft.css( { 'left': '-' + this.panelWidth + 'px', 'height': jQuery(window).height() + 'px', 'width': this.panelWidth + 'px' } );
                this.menuRight.css( { 'right': '-' + this.panelWidth + 'px', 'height': jQuery(window).height() + 'px', 'width': this.panelWidth + 'px' } );
            }
        } else {
            this.menuItems.removeClass('active');
            this.menuItems.children().removeAttr('style');

            this.menu.removeAttr('style');
            this.menuLeft.removeAttr('style');
            this.menuRight.removeAttr('style');
        }
    }

    MainMenu.prototype.openMenu = function () {
        this.nav.addClass('menu-open');
        this.quickNav.addClass('hide');
        
        if (!resizeHandler.respondToEquals('xs')) {
            this.menu.css({ 'height': jQuery(window).height() + 'px'});
            this.menuLeft.animate({ 'left': '-' + (this.skewWidth / 2) + 'px' }, 500);
            this.menuRight.animate({ 'right': '-' + (this.skewWidth / 2) + 'px' }, 500);
        }
    }

    MainMenu.prototype.closeMenu = function() {
        this.menuItems.removeClass('active');
        this.quickNav.removeClass('hide');

        if (!resizeHandler.respondToEquals('xs')) {
            this.menuLeft.animate({ 'left': '-' + (this.panelWidth + (this.skewWidth / 2)) + 'px' }, 500);
            this.menuRight.animate({ 'right': '-' + (this.panelWidth + (this.skewWidth / 2)) + 'px' }, 500);
            setTimeout(function(){ 
                mainMenu.nav.removeClass('menu-open');
                mainMenu.menu.css({ 'height': '0px'});
            }, 500);
        } else {
            mainMenu.nav.removeClass('menu-open');
        }
    }

    MainMenu.prototype.registerEvents = function () {
        var that = this;

        this.show.on('click', function () {
            that.openMenu();
            return false;
        });

        this.hide.on('click', function () {
            that.closeMenu();
            return false;
        });

        this.menuItemToggle.on('click', function () {
            if (!resizeHandler.respondToEquals('xs'))
                that.menuItems.removeClass('active');
            jQuery(this).parent().toggleClass('active');
            return false;
        });

        this.menuItem.on('mouseover', function () {
            if (!resizeHandler.respondToEquals('xs')) {
                var _active = jQuery(this).parent().hasClass('active')
                that.menuItems.removeClass('active');
                jQuery(this).parent().toggleClass('active');

                                
                jQuery(this).parent().children('div').each(function(s, subitem){
                    var itemWidth = jQuery(this).parent().width() - 30;
                    var maxWidth = that.nav.width() / 4;
                    jQuery(subitem).css({'left': (itemWidth + that.skewWidth + 50) + 'px', 'width': maxWidth + 'px'});
                });


                if (!_active) {
                    return false;
                }
            }
        });
    }

    MainMenu.prototype.registerResize = function () {
        var that = this;
        resizeHandler.register(function () {
            that.setupMenu();
        });
    };
    
    return MainMenu;
}());

var QuickNav = (function () {

    function QuickNav() {
        this.selector = jQuery('.quick-nav');
        this.container = jQuery('.quick-nav-container');
        this.anchors = jQuery('.anchor');
        this.scrollTime = 1000;
        this.top = 0;
        this.hasFixedDropdown = false;
        this.spacer;

        if (this.container.length > 0) {
            this.updateTop();

            this.registerEvents();
            this.registerScroll();
            this.registerResize();
            this.setupQuickNav();
            this.setupScrollSpy();
        }
    }

    QuickNav.prototype.updateTop = function() {
        var container = $(this.selector).siblings('.container').first();
        this.top = container.offset().top;
    };

    QuickNav.prototype.setupBlackLink = function () {
        // If there is an component-hero we will get the text from there and add it to the navigation.
        var studyName = jQuery('.component-hero:first').find('h1:first').text();

        if (studyName) {

            var blackLink = jQuery('<li><a id="black-link">' + studyName + '</a></li>');

            blackLink.off('click').click(function (e) {
                that.scrollToTop();
            });

            this.container.append(blackLink);
        }
    };

    QuickNav.prototype.setupQuickNav = function () {
        var that = this;
        this.setupBlackLink();

        this.anchors.each(function(j, anchor) {
            var anchorLink = jQuery(anchor).attr('id');
            var anchorName = jQuery(anchor).data('name');

            that.container.append(jQuery('<li><a class="nav-link" href="#' + anchorLink + '">' + anchorName + '</a></li>'));
        });
    };

    QuickNav.prototype.setQuickNav = function () {
        var scrollTop = jQuery(window).scrollTop();

        if (resizeHandler.respondToEquals('xs')) {
            this.selector.removeAttr('style');
            this.selector.removeClass('fixed');

            var spacer = jQuery('#spacer');

            if (scrollTop > this.top) {

                if (spacer.length === 0){
                    // 30 is a nice offset height to make it smooth
                    var height = this.selector.outerHeight() + 30 + 'px';
                    var $spacer = jQuery("<div id='spacer' style='height: "+ height +"'></div>");
                    this.selector.parent().prepend($spacer);
                }

                this.selector.addClass('static');
                this.container.addClass('dropdown-menu');
                this.container.parent().addClass('dropdown');

                var offsetLeft = (jQuery(window).width() - 300) / 2;
                this.container.css({ "left": offsetLeft + "px" });
            } else {
                if (spacer.length === 1) {
                    spacer.remove();
                }
                this.selector.removeClass('static');
                this.container.removeClass('dropdown-menu');
                this.container.parent().removeClass('dropdown');
                this.container.removeAttr('style');
            }
        } else {
            this.selector.removeClass('static');
            this.container.removeClass('dropdown-menu');
            this.container.parent().removeClass('dropdown');
            this.container.removeAttr('style');

            if (scrollTop > this.top) {
                this.selector.addClass('fixed');
            } else {
                this.selector.removeClass('fixed');
            }
        }
    };

    QuickNav.prototype.setupScrollSpy = function () {
        var that = this;
        this.anchors.on('scrollSpy:enter', function() {
            that.spyEvent(this);
        });
        this.anchors.scrollSpy();
    };

    QuickNav.prototype.spyEvent = function(element) {
        var anchor = jQuery(element);

        if (anchor.attr('id') !== undefined) {
            var id = anchor.attr('id');
            this.container.find('li').removeClass('active');

            var toggle = jQuery('.dropdown-toggle', this.selector);
            var item = this.selector.find('[href="#' + id + '"]');
            if (item) {
                item.parent().addClass('active');
                toggle.text(item.text());
            }
        }
    };

    QuickNav.prototype.registerEvents = function () {
        var that = this;
        jQuery('.quick-nav .quick-nav-wrapper').on('click', 'a.nav-link', function(e, i){
            var linkId = $(this).attr("href").toLowerCase();
            $('html, body').animate({ scrollTop: $(linkId).offset().top }, that.scrollTime );
            return false;
        });
    };

    QuickNav.prototype.registerScroll = function () {
        var that = this;
        scrollHandler.register(function () {
            that.setQuickNav();
        });
    };
    
    QuickNav.prototype.registerResize = function () {
        var that = this;
        resizeHandler.register(function () {
            that.updateTop();
        });
    };

    QuickNav.prototype.scrollToTop = function () {
        $('html, body').animate({scrollTop: 0}, this.scrollTime);
    };
    
    return QuickNav;
}());

var ResizeHandler = (function () {
    function ResizeHandler() {
        this.callbacks = [];
        this.running = false;
        this.respondTo = window.getComputedStyle(document.body, ':after').getPropertyValue('content');
    }
    ResizeHandler.prototype.resize = function () {
        if (!resizeHandler.running) {
            resizeHandler.running = true;
            resizeHandler.respondTo = window.getComputedStyle(document.body, ':after').getPropertyValue('content');
            setTimeout(resizeHandler.run, 66);
        }
    };
    ResizeHandler.prototype.run = function () {
        resizeHandler.callbacks.forEach(function (callback) {
            callback();
        });
        resizeHandler.running = false;
    };
    ResizeHandler.prototype.add = function (callback) {
        if (callback)
            this.callbacks.push(callback);
    };
    ResizeHandler.prototype.register = function (callback) {
        if (!this.callbacks.length)
            window.addEventListener('resize', this.resize);
        this.add(callback);
    };
    ResizeHandler.prototype.respondToEquals = function (input) {
        if (this.respondTo.indexOf(input) === -1)
            return false;
        return true;
    };
    return ResizeHandler;
}());

var ScrollHandler = (function () {
    function ScrollHandler() {
        this.callbacks = [];
        this.running = false;
    }
    ScrollHandler.prototype.scroll = function () {
        if (!scrollHandler.running) {
            scrollHandler.running = true;
            setTimeout(scrollHandler.run, 66);
        }
    };
    ScrollHandler.prototype.run = function () {
        scrollHandler.callbacks.forEach(function (callback) {
            callback();
        });
        scrollHandler.running = false;
    };
    ScrollHandler.prototype.add = function (callback) {
        if (callback)
            this.callbacks.push(callback);
    };
    ScrollHandler.prototype.register = function (callback) {
        if (!this.callbacks.length)
            window.addEventListener('scroll', this.scroll);
        this.add(callback);
    };
    return ScrollHandler;
}());

var SearchBox = (function () {

    function SearchBox() {
        this.searchToggle = jQuery('.search-toggle');
        this.searchBox = jQuery('.search-box');

        if (this.searchBox.length > 0) {
            this.registerEvents();
        }
    }

    SearchBox.prototype.registerEvents = function () {
        var that = this;
        jQuery(this.searchToggle).on('click', function () {
            jQuery(that.searchBox).toggleClass('show');
            return false;
        });
    }
    
    return SearchBox;
}());

var Slider = (function () {

    function Slider() {
        this.component = jQuery('.component-slider');
        this.slider = jQuery('.slider');
        this.skewContainer = jQuery('.skew-container');
        this.slides = jQuery('.slide');
        this.images = jQuery('.slide-img');
        this.ctrlPrev = jQuery('.ctrl-prev');
        this.ctrlNext = jQuery('.ctrl-next');
        
        this.slideStep = 0;
        this.slideStop = 0;

        if (this.slider.length > 0) {
            this.registerResize();
            this.registerEvents();
            this.setSlider();
        }
    }

    Slider.prototype.setSlider = function () {
        var componentWidth = this.component.width();
        var height = (componentWidth / 4) + 50;
        // if (resizeHandler.respondToEquals('xs')) {
        //     height = (componentWidth) + 50;
        // }
        var skewWidth = (height * 1.1944) -height;
        var totalWidth = (skewWidth * 2) + componentWidth;
        var slideWidth = Math.round(totalWidth / 2);
        // if (resizeHandler.respondToEquals('xs')) {
        //     slideWidth = Math.round((totalWidth / 3) * 2);
        // }
        var sliderWidth = this.slides.length * slideWidth;
        if (this.slides.length > 2) {
            this.slider.css({"left": "0"});
            this.slideStep = Math.round((componentWidth / 2) + (skewWidth / 2));
            this.slideStop = Math.round((this.slideStep * (this.slides.length - 2)) * -1);
            this.ctrlNext.show();
        }

        this.skewContainer.css({"width": sliderWidth + "px"});
        this.slider.css({"width": (sliderWidth - (skewWidth * 2)) + "px"});
        this.slides.css({"height": height + "px", "width": slideWidth + "px", "margin-left": "-" + (skewWidth / 2) + "px"});
        this.images.css({"height": height + "px", "width": slideWidth + skewWidth + "px"});
    }

    Slider.prototype.registerResize = function () {
        var that = this;
        resizeHandler.register(function () {
            that.setSlider();
        });
    }

    Slider.prototype.registerEvents = function () {
        var that = this;
        
        jQuery(this.ctrlNext).on('click', function () {
            var position = that.slider.position();
            var left = position.left - that.slideStep;

            if (that.slideStop <= left) {
                that.slider.css({ "left": left + "px" });

                if (left == that.slideStop) {
                     that.ctrlNext.hide();
                }

                if (left < 0) {
                     that.ctrlPrev.show();
                }
            }
            return false;
        });
        
        jQuery(this.ctrlPrev).on('click', function () {
            var position = that.slider.position();
            var left = position.left + that.slideStep;

            if (left <= 0) {
                that.slider.css({ "left": left + "px" });

                if (left == 0) {
                     that.ctrlPrev.hide();
                }

                if (left <= 0) {
                     that.ctrlNext.show();
                }
            }
            return false;
        });
    }
    
    return Slider;
}());
$(document).ready(function () {
    $(".owl-carousel").owlCarousel({
        nav:true,
        dots:false,
        loop:true,
        center:true,
        autoWidth:true,
        navClass: [
            'streamer__nav--prev',
            'streamer__nav--next'
        ]
    });

    $(".owl-nav").removeClass('disabled')
});

var TabHandler = (function () {

    function TabHandler() {
        this.tabHeader = jQuery('.component-tab .panel-group .panel-heading a');
        this.tabTitle = jQuery('.component-tab .panel-group .panel-heading .panel-title');

        this.registerEvents();

        this.tabHeader.eq(0).parent().addClass('open');
    }

    TabHandler.prototype.registerEvents = function () {
        var that = this;
        jQuery(this.tabHeader).on('click', function () {
            if (!resizeHandler.respondToEquals('xs')) {
                if (jQuery(this).parent().hasClass('open')) {
                    return false;
                } else {
                    jQuery(that.tabHeader).parent().removeClass('open');
                    jQuery(this).parent().addClass('open');
                }
            } else {
                    jQuery(that.tabHeader).parent().removeClass('open');
                    jQuery(this).parent().addClass('open');
            }
        });
    }
    
    return TabHandler;
}());

var YouTube = (function () {

    function YouTube() {
        this.videos = jQuery('.video');
        this.hero = jQuery('.video-banner .video');
        this.players = [];
        this.heroVideo;

        if (this.videos.length > 0) {
            this.registerYouTube();

            if (this.hero.length > 0) {
                this.registerResize();
            }
        }
    }

    YouTube.prototype.setHeroVideo = function() {
        var videoWidth = jQuery(window).width()+200,
            videoHeight = jQuery(window).height()+200;

        if (videoWidth/videoHeight > 16/9) {
            this.heroVideo.setSize(videoWidth, videoWidth/16*9);
            this.hero.css({'left': '0px'});
        } else {
            this.heroVideo.setSize(videoHeight/9*16, videoHeight);
            this.hero.css({'left': -(this.hero.outerWidth()-videoWidth)/2});
        }
    }

    YouTube.prototype.registerYouTube = function () {
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";

        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }

    YouTube.prototype.playerStateChange = function(event) {
        if (event.data == 0) {
            youTube.heroVideo.seekTo(0);
            //youTube.heroVideo.play();
        }
    }
    
    YouTube.prototype.registerResize = function() {
        var that = this;
        resizeHandler.register(function () {
            that.setHeroVideo();
        });
    }

    return YouTube;
}());

function onYouTubeIframeAPIReady() {
    youTube.videos.each(function(j, video) {
        var playerVars = {
            'showInfo': 0,
            'rel': 0,
        };
        if (jQuery(video).parent().hasClass('video-banner')) {

            if (!resizeHandler.respondToEquals('xs')) {
                playerVars['autoplay'] = 1;
                playerVars['controls'] = 0;
                playerVars['disablekb'] = 1;
                playerVars['iv_load_policy'] = 3;
                playerVars['loop'] = 1

                youTube.heroVideo = new YT.Player(jQuery(video)[0], {
                    playerVars: playerVars,
                    videoId: jQuery(video).data('video'),
                    events: {
                        'onStateChange': youTube.playerStateChange
                    }
                });

                youTube.setHeroVideo();
            } else {
                // destroy video?
            }
        } else {
            youTube.players.push(new YT.Player(jQuery(video)[0], {
                playerVars: playerVars,
                videoId: jQuery(video).data('video')
            }));
        }
    });
}